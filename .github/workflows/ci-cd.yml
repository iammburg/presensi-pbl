name: CI/CD Pipeline
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ develop ]

jobs:
  test-build:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: presensi
        ports: ['3306:3306']
    steps:
      - uses: actions/checkout@v3

      # Laravel Tests
      - uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
      - run: composer install --no-interaction --prefer-dist
      - run: vendor/bin/phpunit --fail-on-warning --stop-on-failure

      # Flask Tests
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - run: |
          pip install --upgrade pip
          pip install -r image-classifier/requirements.txt
      - run: pytest image-classifier/tests

  build-and-push:
    needs: test-build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push Laravel image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: laravel/Dockerfile
          push: true
          tags: ghcr.io/your-org/presensi-laravel:${{ github.sha }}

      - name: Build & push Flask image
        uses: docker/build-push-action@v4
        with:
          context: image-classifier
          file: image-classifier/Dockerfile
          push: true
          tags: ghcr.io/your-org/presensi-flask:${{ github.sha }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: SSH & Deploy on VPS
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd /path/to/compose
            export GIT_SHA=${{ github.sha }}
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml pull
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d --remove-orphans
